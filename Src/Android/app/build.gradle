apply plugin: 'com.android.application'

dependencies {
    testCompile 'junit:junit:4.12'

    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile('com.jayway.restassured:rest-assured:2.9.0') {
        exclude(module: 'groovy')
    }
    testCompile 'com.xebialabs.restito:restito:0.8.1'

    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.5.4'

    // library to mock HTTP REST responses : https://github.com/mkotsur/restito
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    // do not update the retrofit version
    compile 'com.jayway.restassured:json-path:2.9.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.5.0'
    compile 'com.squareup.okhttp:okhttp:2.5.0'
    compile 'com.android.support:appcompat-v7:23.2.1'
    compile 'com.android.support:design:23.2.1'
    compile 'com.android.support:support-v4:23.2.1'
}

def getIP() {
    InetAddress result = null;
    Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
    while (interfaces.hasMoreElements()) {
        Enumeration<InetAddress> addresses = interfaces.nextElement().getInetAddresses();
        while (addresses.hasMoreElements()) {
            InetAddress address = addresses.nextElement();
            if (!address.isLoopbackAddress() && !address.toString().endsWith(".1") && address.toString().length() <= 15) {
                if (address.isSiteLocalAddress()) {
                    return address.getHostAddress();
                } else if (result == null) {
                    result = address;
                }
            }
        }
    }
    return (result != null ? result : InetAddress.getLocalHost()).getHostAddress();
}


android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "ca.umanitoba.cs.votee"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/groovy-release-info.properties'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DISCLAIMER'
    }

    // Definition of build flavours. Just like we have separate
    // configuration files and launch settings for the web server,
    // I thought it would be a good idea to have the same for Android
    // Author: lewkoo
    // taken from http://blog.brainattica.com/how-to-work-with-flavours-on-android/

    // You can access any of these variables by calling BuildConfig.VARIABLE_NAME

    productFlavors {
        development {
            applicationId "ca.umanitoba.cs.votee"
            buildConfigField 'String', 'HOST', '"http://votee-project.herokuapp.com"'
        }

        production {
            applicationId "ca.umanitoba.cs.votee"
            buildConfigField 'String', 'HOST', '"http://votee-project.herokuapp.com"'
        }
    }
}